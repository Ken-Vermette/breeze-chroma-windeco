// This file is generated by kconfig_compiler_kf5 from breezesettingsdata.kcfg.
// All changes you do to this file will be lost.
#ifndef BREEZE_INTERNALSETTINGS_H
#define BREEZE_INTERNALSETTINGS_H

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

namespace Breeze {

class InternalSettings : public KConfigSkeleton
{
  public:
    enum EnumBorderSize { BorderNone, BorderNoSides, BorderTiny, BorderNormal, BorderLarge, BorderVeryLarge, BorderHuge, BorderVeryHuge, BorderOversized };
    enum EnumTitleAlignment { AlignLeft, AlignCenter, AlignCenterFullWidth, AlignRight };
    enum EnumButtonSize { ButtonSmall, ButtonDefault, ButtonLarge, ButtonVeryLarge };
    enum EnumButtonThickness { UseFontWeight, IconBook, IconRegular, IconThick };
    enum EnumExceptionType { ExceptionWindowClassName, ExceptionWindowTitle };

    InternalSettings( );
    ~InternalSettings();

    /**
      Set BorderSize
    */
    void setBorderSize( int v )
    {
      if (!isImmutable( QString::fromLatin1( "BorderSize" ) ))
        mBorderSize = v;
    }

    /**
      Get BorderSize
    */
    int borderSize() const
    {
      return mBorderSize;
    }

    /**
      Set TitleAlignment
    */
    void setTitleAlignment( int v )
    {
      if (!isImmutable( QString::fromLatin1( "TitleAlignment" ) ))
        mTitleAlignment = v;
    }

    /**
      Get TitleAlignment
    */
    int titleAlignment() const
    {
      return mTitleAlignment;
    }

    /**
      Set ButtonSize
    */
    void setButtonSize( int v )
    {
      if (!isImmutable( QString::fromLatin1( "ButtonSize" ) ))
        mButtonSize = v;
    }

    /**
      Get ButtonSize
    */
    int buttonSize() const
    {
      return mButtonSize;
    }

    /**
      Set DrawBorderOnMaximizedWindows
    */
    void setDrawBorderOnMaximizedWindows( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "DrawBorderOnMaximizedWindows" ) ))
        mDrawBorderOnMaximizedWindows = v;
    }

    /**
      Get DrawBorderOnMaximizedWindows
    */
    bool drawBorderOnMaximizedWindows() const
    {
      return mDrawBorderOnMaximizedWindows;
    }

    /**
      Set DrawSizeGrip
    */
    void setDrawSizeGrip( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "DrawSizeGrip" ) ))
        mDrawSizeGrip = v;
    }

    /**
      Get DrawSizeGrip
    */
    bool drawSizeGrip() const
    {
      return mDrawSizeGrip;
    }

    /**
      Set AnimationsEnabled
    */
    void setAnimationsEnabled( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "AnimationsEnabled" ) ))
        mAnimationsEnabled = v;
    }

    /**
      Get AnimationsEnabled
    */
    bool animationsEnabled() const
    {
      return mAnimationsEnabled;
    }

    /**
      Set AnimationsDuration
    */
    void setAnimationsDuration( int v )
    {
      if (!isImmutable( QString::fromLatin1( "AnimationsDuration" ) ))
        mAnimationsDuration = v;
    }

    /**
      Get AnimationsDuration
    */
    int animationsDuration() const
    {
      return mAnimationsDuration;
    }

    /**
      Set HideTitleBar
    */
    void setHideTitleBar( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "HideTitleBar" ) ))
        mHideTitleBar = v;
    }

    /**
      Get HideTitleBar
    */
    bool hideTitleBar() const
    {
      return mHideTitleBar;
    }

    /**
      Set ExceptionType
    */
    void setExceptionType( int v )
    {
      if (!isImmutable( QString::fromLatin1( "ExceptionType" ) ))
        mExceptionType = v;
    }

    /**
      Get ExceptionType
    */
    int exceptionType() const
    {
      return mExceptionType;
    }

    /**
      Set ExceptionPattern
    */
    void setExceptionPattern( const QString & v )
    {
      if (!isImmutable( QString::fromLatin1( "ExceptionPattern" ) ))
        mExceptionPattern = v;
    }

    /**
      Get ExceptionPattern
    */
    QString exceptionPattern() const
    {
      return mExceptionPattern;
    }

    /**
      Set Enabled
    */
    void setEnabled( bool v )
    {
      if (!isImmutable( QString::fromLatin1( "Enabled" ) ))
        mEnabled = v;
    }

    /**
      Get Enabled
    */
    bool enabled() const
    {
      return mEnabled;
    }

    /**
      Set Mask
    */
    void setMask( int v )
    {
      if (!isImmutable( QString::fromLatin1( "Mask" ) ))
        mMask = v;
    }

    /**
      Get Mask
    */
    int mask() const
    {
      return mMask;
    }

  protected:

    // Windeco
    int mBorderSize;
    int mTitleAlignment;
    int mButtonSize;
    bool mDrawBorderOnMaximizedWindows;
    bool mDrawSizeGrip;
    bool mAnimationsEnabled;
    int mAnimationsDuration;
    bool mHideTitleBar;
    int mExceptionType;
    QString mExceptionPattern;
    bool mEnabled;
    int mMask;

  private:
};

}

#endif

